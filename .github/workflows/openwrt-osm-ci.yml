#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: OpenWrt-OSM-CI

on:
  workflow_dispatch:
    branches:
      - main
  release:
    types: [published]

jobs:

  build_openwrt:

    name: Build OpenWrt OSM Firmware

    runs-on: ubuntu-22.04

    defaults:
        run:
          working-directory: ./openwrt

    env:
      VERSION_NUMBER: ""

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: true
          
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /etc/mysql /etc/php
          sudo -E apt-get -y purge azure-cli* docker* ghc* zulu* hhvm* llvm* firefox* google* dotnet* aspnetcore* powershell* openjdk* adoptopenjdk* mysql* php* mongodb* moby* snap* || true
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint clang bison g++ g++-multilib libncurses-dev python3-distutils rsync file wget
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1

      - name: Download source code
        run: |
          #Prepare version
          source ../parse_yaml.sh
          eval $(parse_yaml ../version.yaml)

          #Download source code
          rm -f .gitkeep
          git config --global advice.detachedHead false
          git clone -b $version_upstream_version_tag --depth 1 https://github.com/openwrt/openwrt.git .

          #Merge_feeds
          for f in $version_feeds_ ; do eval echo \$${f} >> feeds.conf.default ; done

      - name: Update feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file
        run: |
          #Prepare version info
          source ../parse_yaml.sh
          eval $(parse_yaml ../version.yaml)
          echo "VERSION_NUMBER=${version_version_number}" >> "$GITHUB_ENV"

          #Download upstream release config
          version_repo=$(grep -E '^VERSION_REPO.*https:/.' include/version.mk | grep -Eo 'https://.*[^)]')
          wget -nv -O .config $version_repo/targets/x86/64/config.buildinfo

          #Merge config
          for f in $version_config_ ; do eval echo \$${f} >> .config ; done

          #Set dnsmasq-full as default
          sed -i 's/dnsmasq \\/dnsmasq-full \\/g' include/target.mk
          #Config luci-theme-argon as default theme
          sed -i 's/luci-theme-bootstrap/luci-theme-argon/g' .config

          #Get revivion number
          repo_url=${{ github.repositoryUrl }}
          git clone --bare ${repo_url/git/https} /tmp/openwrt-osm-bare
          cd /tmp/openwrt-osm-bare
          revision_number=$(git rev-list --count $(git log --reverse --pretty=format:%h | head -1)..${{ github.ref_name }})
          cd -
          rm -rf /tmp/openwrt-osm-bare
          
          #Config version info
          sed -i "s/CONFIG_VERSION_DIST=\"OpenWrt\"/CONFIG_VERSION_DIST=\"OpenWrt-OSM\"/g" .config
          sed -i "s/CONFIG_VERSION_NUMBER=\"\"/CONFIG_VERSION_NUMBER=\"${version_version_number}\"/g" .config
          sed -i "s/CONFIG_VERSION_CODE=\"\"/CONFIG_VERSION_CODE=\"r$revision_number-$(git -C ../ rev-parse --short=10 HEAD)\"/g" .config

          #Download Toolchain
          cd /tmp > /dev/null
          wget -nv -O release_page.html ${version_repo}/targets/x86/64/
          toolchain_file=$(grep -m 1 -Eo '"openwrt-toolchain-(.*).(xz|zst)"' /tmp/release_page.html | tr -d '"')
          echo 'Downloading toolchain...'
          wget -nv -O ${toolchain_file} ${version_repo}/targets/x86/64/${toolchain_file}
          tar -xf ${toolchain_file}
          toolchain_dir=$(basename $(find ${toolchain_file%.*.*} -name "toolchain-*" -type d))
          mv -f ${toolchain_file%.*.*}/${toolchain_dir} .
          toolchain_path=/tmp/$toolchain_dir
          rm -rf ${toolchain_file%.*.*}*
          cd - > /dev/null

          #Setup external toolchain
          ./scripts/ext-toolchain.sh --toolchain $toolchain_path --overwrite-config --config x86-64/generic

      - name: Make download
        run: |
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)

      - name: Apply Patches
        run: |
          find ../patches/ -type f | while read patch
          do
              if [ -d $(dirname ${patch#*../patches/}) ] ; then 
                  cp $patch ${patch#*../patches/}
              fi
          done

      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1

      - name: Generate vmdk files
        run: |
          #Convert img to vmdk
          for file in $(find ./bin -name "openwrt-osm-*-efi.img.gz" -type f);
          do
            echo "Convert image $(basename $file) to vmdk"
            cd $(dirname $file) > /dev/null
            gunzip -f -q -c $(basename $file) > $(basename $file .gz)
            qemu-img convert -f raw $(basename $file .gz) -O vmdk $(basename $file .img.gz).vmdk
            gzip -f -q $(basename $file .img.gz).vmdk
            rm $(basename $file .gz)
            cd - > /dev/null
          done

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact
          cp -rf $(find ./bin/targets/ -name "*.img.gz" -type f) ./artifact/
          cp -rf $(find ./bin/targets/ -name "*.vmdk.gz" -type f) ./artifact/
          kmod_bnx2x=$(find ./bin -type f -name "kmod-bnx2x*.ipk")
          if [ ! -z $kmod_bnx2x ]; then
            cp -rf $kmod_bnx2x ./artifact/$(basename $(echo $kmod_bnx2x | sed 's/kmod-bnx2x/kmod-bnx2x_2.5G/g'))
          fi
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/

      - name: Deliver release
        if: github.event_name != 'release'
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-osm-${{ env.VERSION_NUMBER }}
          path: openwrt/artifact/

      - name: Upload release asset
        if: github.event_name == 'release'
        uses: alexellis/upload-assets@0.4.0
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          asset_paths: '["openwrt/artifact/*"]'
