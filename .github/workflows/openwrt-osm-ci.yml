#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: OpenWrt-OSM-CI

on:
  workflow_dispatch:
    branches: 
      - main
  release:
    types: [published]

jobs:

  build_openwrt:

    name: Build OpenWrt OSM Firmware

    runs-on: ubuntu-latest
    
    defaults:
        run:
          working-directory: ./openwrt
          
    env:
      VERSION_NUMBER: ""

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint clang bison g++ g++-multilib libncurses-dev python3-distutils rsync file wget
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1
          
      - name: Download source code
        run: |
          #Prepare version
          source ../parse_yaml.sh
          eval $(parse_yaml ../version.yaml)
          which qemu-img
          #Download source code
          rm -f .gitkeep
          git config --global advice.detachedHead false
          git clone -b $version_upstream_version_tag --depth 1 https://github.com/openwrt/openwrt.git .
          
          # S1 repo url
          download_package(){
          	repo=$(echo $1 | grep -Eo '^http*.*..git')
          	commit=$(echo $1 | grep -Eo '\^.*' | tr -d '^')
          	branch=$(echo $1 | grep -Eo ';.*' | tr -d ';')
          	if [ ! -z $commit ]; then
          		echo Downloading package from $1
          		git -C package clone $repo && cd package/$(basename $repo .git) && git checkout $commit && cd -
          	elif [ ! -z $branch ]; then
          		echo Downloading package from $1
          		git -C package clone $repo --depth 1 --branch $branch
          	else
          		echo "Invalid package info $1"
          		exit 1
          	fi
          }
          
          #Download extra package
          for f in $version_package_ ; do eval download_package \$${f} ; done
          
      - name: Update feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file
        run: |
          #Prepare version info
          source ../parse_yaml.sh
          eval $(parse_yaml ../version.yaml)
          echo "VERSION_NUMBER=${version_version_number}" >> "$GITHUB_ENV"

          #Download upstream release config
          version_repo=$(grep -E '^VERSION_REPO.*https:/.' include/version.mk | grep -Eo 'https://.*[^)]')
          wget -nv -O .config $version_repo/targets/x86/64/config.buildinfo
          
          #Merge config
          for f in $version_config_ ; do eval echo \$${f} >> .config ; done
          
          #Set dnsmasq-full as default
          sed -i 's/dnsmasq \\/dnsmasq-full \\/g' include/target.mk
          #config luci-theme-argon as default theme
          sed -i 's/luci-theme-bootstrap/luci-theme-argon/g' .config
          #Config version info
          sed -i "s/CONFIG_VERSION_DIST=\"OpenWrt\"/CONFIG_VERSION_DIST=\"OpenWrt-OSM\"/g" .config
          sed -i "s/CONFIG_VERSION_NUMBER=\"\"/CONFIG_VERSION_NUMBER=\"${version_version_number}\"/g" .config
          sed -i "s/CONFIG_VERSION_CODE=\"\"/CONFIG_VERSION_CODE=\"$(git -C ../ rev-parse --short=10 HEAD)\"/g" .config
          
          #Download Toolchain
          cd /tmp > /dev/null
          wget -nv -O release_page.html ${version_repo}/targets/x86/64/
          toolchain_file=$(grep -m 1 -Eo '"openwrt-toolchain-(.*).tar.xz"' /tmp/release_page.html | tr -d '"')
          echo 'Downloading toolchain...'
          wget -nv -O ${toolchain_file} ${version_repo}/targets/x86/64/${toolchain_file}
          tar -xf ${toolchain_file}
          toolchain_dir=$(basename $(find $(basename $toolchain_file .tar.xz) -name "toolchain-*" -type d))
          mv -f $(basename $toolchain_file .tar.xz)/${toolchain_dir} .
          toolchain_path=/tmp/$toolchain_dir
          rm -rf $(basename $toolchain_file .tar.xz)*
          cd - > /dev/null
          
          #Setup external toolchain
          ./scripts/ext-toolchain.sh --toolchain $toolchain_path --overwrite-config --config x86-64/generic
          
      - name: Make download
        run: |
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          find ../patches/ -type f | while read patch; do cp $patch ${patch#*../patches/}; done
          
      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact
          cp -rf $(find ./bin/targets/ -name "*.img.gz" -type f) ./artifact/
          cp -rf $(find ./bin -type f -name "kmod-bnx2x*.ipk") ./artifact/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/

      - name: Deliver release
        if: github.event_name != 'release'
        uses: actions/upload-artifact@v3
        with:
          name: openwrt-osm-${{ env.VERSION_NUMBER }}
          path: openwrt/artifact/

      - name: Upload release asset
        if: github.event_name == 'release'
        uses: alexellis/upload-assets@0.4.0
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          asset_paths: '["openwrt/artifact/*"]'
