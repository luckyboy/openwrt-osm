#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: OpenWrt-OSM-CI

on:
  workflow_dispatch:
    branches: 
      - main
  release:
    types: [published]

jobs:

  build_openwrt:

    name: Build OpenWrt OSM Firmware

    runs-on: ubuntu-latest
    
    defaults:
        run:
          working-directory: ./openwrt

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint clang bison g++ g++-multilib libncurses-dev python3-distutils rsync file wget
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          
      - name: Download source code
        run: |
          rm -f .gitkeep
          
          git -c advice.detachedHead=false clone -b $1 --depth 1 https://github.com/openwrt/openwrt.git .
          
          # S1 Repo url
          # $2 Repo subdirectory (optional)
          download_package_latest_tag_from_repo(){
          	latest_tag=$(git ls-remote --tags --refs --sort="v:refname" $1 | tail -n1 | sed 's/.*\///')
          	echo Download $1@$latest_tag
          	git -c advice.detachedHead=false -C /tmp clone -b $latest_tag --depth 1 $1
          	cp -r /tmp/$(basename $1 .git)/$2 package
          	rm -rf /tmp/$(basename $1 .git)
          }
          
          download_package_latest_tag_from_repo https://github.com/vernesong/OpenClash.git luci-app-openclash
          download_package_latest_tag_from_repo https://github.com/jerrykuku/luci-theme-argon.git
          
      - name: Update feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file
        run: |
          VERSION_REPO=$(grep -E '^VERSION_REPO.*https:/.' include/version.mk | grep -Eo 'https://.*[^)]')
          wget -nv -O .config $VERSION_REPO/targets/x86/64/config.buildinfo
          
          cat >>.config<<EOF
          CONFIG_LUCI_LANG_zh_Hans=y
          CONFIG_PACKAGE_dockerd=y
          CONFIG_PACKAGE_luci-app-dockerman=y
          CONFIG_PACKAGE_luci-app-openclash=y
          CONFIG_PACKAGE_luci-app-smartdns=y
          CONFIG_PACKAGE_luci-app-sqm=y
          CONFIG_PACKAGE_luci-app-udpxy=y
          CONFIG_PACKAGE_luci-app-wireguard=y
          CONFIG_TARGET_ROOTFS_PARTSIZE=4096
          EOF
          
          #Set dnsmasq-full as default
          sed -i 's/dnsmasq \\/dnsmasq-full \\/g' include/target.mk
          sed -i 's/luci-theme-bootstrap/luci-theme-argon/g' .config
          sed -i "s/CONFIG_VERSION_DIST=\"OpenWrt\"/CONFIG_VERSION_DIST=\"OpenWrt-OSM\"/g" .config
          
          #Download Toolchain
          wget -nv -O /tmp/release_page.html ${VERSION_REPO}/targets/x86/64/
          TOOLCHAIN=$(grep -m 1 -Eo '"openwrt-toolchain-(.*).tar.xz"' /tmp/release_page.html | tr -d '"')
          wget -nv -O /tmp/${TOOLCHAIN} ${VERSION_REPO}/targets/x86/64/${TOOLCHAIN}
          tar -C /tmp -xf /tmp/${TOOLCHAIN}
          TOOLCHAIN_DIR_NAME=$(basename $(find /tmp/$(basename $TOOLCHAIN .tar.xz) -name "toolchain-*" -type d))
          mv /tmp/$(basename $TOOLCHAIN .tar.xz)/${TOOLCHAIN_DIR_NAME} /tmp/
          
          #Setup external toolchain
          ./scripts/ext-toolchain.sh --toolchain /tmp/${TOOLCHAIN_DIR_NAME} --overwrite-config --config x86-64/generic
          
      - name: Make download
        run: |
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          find ../patches/ -type f | while read patch; do cp $patch ${patch#*../patches/}; done
          
      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact
          cp -rf $(find ./bin/targets/ -name "*.img.gz" -type f) ./artifact/
          cp -rf $(find ./bin -type f -name "kmod-bnx2x*.ipk") ./artifact/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/

      - name: Deliver release
        if: github.event_name != 'release'
        uses: actions/upload-artifact@v3
        with:
          name: openwrt-osm-${{ env.RELEASE_VERSION_NUMBER }}
          path: openwrt/artifact/

      - name: Upload release asset
        if: github.event_name == 'release'
        uses: alexellis/upload-assets@0.4.0
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          asset_paths: '["openwrt/artifact/*"]'
